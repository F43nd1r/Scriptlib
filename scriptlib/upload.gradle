//source https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    source += files('build/generated/source/aidl/release')
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def userName = properties.getProperty("bintray.user")
def bintrayApiKey = properties.getProperty("bintray.apikey")
def artifactoryApiKey = properties.getProperty("artifactory.apikey")

bintray {
    user = userName
    key = bintrayApiKey

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
publishing {
    publications {
        aar(MavenPublication) {
            groupId = publishedGroupId
            artifactId = artifact
            version = libraryVersion
            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
            artifact sourcesJar{
                classifier 'sources'
            }
            artifact javadocJar{
                classifier 'javadoc'
            }
            pom.withXml{
                def nodes = new XmlParser().parse(new File("${project.buildDir}/poms/pom-default.xml")).children()
                for(def iterator = asNode().children().iterator();iterator.hasNext();){
                    iterator.next()
                    iterator.remove()
                }
                for(def node: nodes){
                    asNode().append(node)
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = libraryVersion.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
            username = userName // The publisher user name
            password = artifactoryApiKey // The publisher password
            maven = true
        }
        defaults {
            publishArtifacts = true
            publications('aar')
            publishPom = true //Publish generated POM files to Artifactory (true by default)
            publishIvy = false
            //Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
    resolve {
        repository {
            repoKey = 'jcenter'
            username = userName // The resolver user name
            password = artifactoryApiKey // The resolver password
        }
    }
}
artifactoryPublish.dependsOn(install)
